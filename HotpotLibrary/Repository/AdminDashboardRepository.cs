using HotpotLibrary.Data;
using HotpotLibrary.Interfaces;
using HotpotLibrary.Models;
using log4net;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace HotpotLibrary.Repository
{
    public class AdminDashboardRepository : IAdminDashboard
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(AdminDashboardRepository));
        private readonly AppDbContext _context;

        public AdminDashboardRepository(AppDbContext context)
        {
            _context = context;
            log.Info("AdminDashboard instance created.");
        }

        // 1. Retrieve orders from the past 7 days
        public List<Order> GetOrdersFromLast7Days()
        {
            log.Info("Retrieving orders from the past 7 days.");
            DateTime sevenDaysAgo = DateTime.Now.AddDays(-7);
            var orders = _context.Orders
                .Where(o => o.OrderDate >= sevenDaysAgo)
                .ToList();
            log.Info($"Retrieved {orders.Count} orders from the past 7 days.");
            return orders;
        }

        // 2. Retrieve Regular Users (users with consistent activity)
        public List<User> GetRegularUsers()
        {
            log.Info("Retrieving regular users.");
            DateTime thirtyDaysAgo = DateTime.Now.AddDays(-30);
            var regularUsers = _context.Users
                .Where(u => _context.Orders
                    .Count(o => o.UserID == u.UserID && o.OrderDate >= thirtyDaysAgo) >= 5)
                .ToList();
            log.Info($"Retrieved {regularUsers.Count} regular users.");
            return regularUsers;
        }

        // 3. Retrieve total number of orders per day
        public Dictionary<DateTime, int> GetTotalOrdersPerDay(DateTime startDate, DateTime endDate)
        {
            log.Info($"Retrieving total number of orders from {startDate} to {endDate}.");
            var ordersPerDay = _context.Orders
                .Where(o => o.OrderDate.Date >= startDate.Date && o.OrderDate.Date <= endDate.Date)
                .GroupBy(o => o.OrderDate.Date)
                .ToDictionary(g => g.Key, g => g.Count());
            log.Info("Retrieved total number of orders per day.");
            return ordersPerDay;
        }

        // 4. Retrieve the number of Veg, Non-Veg, Juices, Desserts per Day/Week/Month
        public Dictionary<string, Dictionary<DateTime, int>> GetMenuItemCountsByCategory(string category, DateTime startDate, DateTime endDate)
        {
            log.Info($"Retrieving menu item counts for category {category} from {startDate} to {endDate}.");

            // Fetch data from database
            var orderDetails = _context.OrderDetails
                .Where(oi => oi.MenuItem.Category == category
                             && oi.Order.OrderDate.Date >= startDate.Date
                             && oi.Order.OrderDate.Date <= endDate.Date)
                .Select(oi => new
                {
                    oi.MenuItem.Category,
                    OrderDate = oi.Order.OrderDate.Date,
                    oi.Quantity
                })
                .ToList();

            // Perform grouping and aggregation in-memory
            var menuItemCounts = orderDetails
                .GroupBy(oi => new { oi.Category, oi.OrderDate })
                .GroupBy(g => g.Key.Category)
                .ToDictionary(
                    g => g.Key,
                    g => g.ToDictionary(
                        dateGroup => dateGroup.Key.OrderDate,
                        dateGroup => dateGroup.Sum(i => i.Quantity)
                    )
                );

            log.Info("Retrieved menu item counts by category.");
            return menuItemCounts;
        }

        // 5. Retrieve total revenue generated by orders daily, weekly, or monthly
        public Dictionary<DateTime, decimal> GetRevenueReports(string period)
        {
            log.Info($"Retrieving revenue reports for period: {period}.");
            var query = _context.Orders.AsQueryable();

            Dictionary<DateTime, decimal> revenueReports;

            if (period == "daily")
            {
                revenueReports = query
                    .GroupBy(o => o.OrderDate.Date)
                    .ToDictionary(
                        g => g.Key,
                        g => g.Sum(o => o.TotalAmount)
                    );
            }
            else if (period == "weekly")
            {
                revenueReports = query
                    .GroupBy(o => new { Week = ISOWeek.GetWeekOfYear(o.OrderDate), Year = o.OrderDate.Year })
                    .ToDictionary(
                        g => new DateTime(g.Key.Year, 1, 1).AddDays(g.Key.Week * 7),
                        g => g.Sum(o => o.TotalAmount)
                    );
            }
            else if (period == "monthly")
            {
                revenueReports = query
                    .GroupBy(o => new { o.OrderDate.Year, o.OrderDate.Month })
                    .ToDictionary(
                        g => new DateTime(g.Key.Year, g.Key.Month, 1),
                        g => g.Sum(o => o.TotalAmount)
                    );
            }
            else
            {
                log.Error("Invalid period specified.");
                return new Dictionary<DateTime, decimal>();
            }

            log.Info("Retrieved revenue reports.");
            return revenueReports;
        }

        // 6. Get the top-selling items across different periods (daily, weekly, monthly)
        public List<MenuItem> GetTopSellingItems(string period)
        {
            log.Info($"Retrieving top-selling items for period: {period}.");
            var query = _context.OrderDetails.AsQueryable();

            List<MenuItem> topSellingItems;

            if (period == "daily")
            {
                topSellingItems = query
                    .GroupBy(oi => new { oi.MenuItemID, oi.Order.OrderDate.Date })
                    .OrderByDescending(g => g.Sum(oi => oi.Quantity))
                    .Select(g => g.FirstOrDefault().MenuItem)
                    .ToList();
            }
            else if (period == "weekly")
            {
                topSellingItems = query
                    .GroupBy(oi => new { oi.MenuItemID, Week = ISOWeek.GetWeekOfYear(oi.Order.OrderDate) })
                    .OrderByDescending(g => g.Sum(oi => oi.Quantity))
                    .Select(g => g.FirstOrDefault().MenuItem)
                    .ToList();
            }
            else if (period == "monthly")
            {
                topSellingItems = query
                    .GroupBy(oi => new { oi.MenuItemID, oi.Order.OrderDate.Year, oi.Order.OrderDate.Month })
                    .OrderByDescending(g => g.Sum(oi => oi.Quantity))
                    .Select(g => g.FirstOrDefault().MenuItem)
                    .ToList();
            }
            else
            {
                log.Error("Invalid period specified.");
                return new List<MenuItem>();
            }

            log.Info("Retrieved top-selling items.");
            return topSellingItems;
        }

        // 7. Retrieve users based on the frequency of orders (daily, weekly, monthly)
        public List<User> GetUsersByOrderFrequency(string period)
        {
            log.Info($"Retrieving users by order frequency for period: {period}.");
            var query = _context.Users.AsQueryable();

            List<User> usersByFrequency;

            if (period == "daily")
            {
                usersByFrequency = query
                    .Where(u => _context.Orders
                        .Where(o => o.UserID == u.UserID)
                        .GroupBy(o => o.OrderDate.Date)
                        .Any(g => g.Count() >= 1))
                    .ToList();
            }
            else if (period == "weekly")
            {
                usersByFrequency = query
                    .Where(u => _context.Orders
                        .Where(o => o.UserID == u.UserID)
                        .GroupBy(o => ISOWeek.GetWeekOfYear(o.OrderDate))
                        .Any(g => g.Count() >= 1))
                    .ToList();
            }
            else if (period == "monthly")
            {
                usersByFrequency = query
                    .Where(u => _context.Orders
                        .Where(o => o.UserID == u.UserID)
                        .GroupBy(o => new { o.OrderDate.Year, o.OrderDate.Month })
                        .Any(g => g.Count() >= 1))
                    .ToList();
            }
            else
            {
                log.Error("Invalid period specified.");
                return new List<User>();
            }

            log.Info("Retrieved users by order frequency.");
            return usersByFrequency;
        }

        // 8. Get the average value of orders placed each day, week, or month
        public Dictionary<DateTime, decimal> GetAverageOrderValue(string period)
        {
            log.Info($"Retrieving average order value for period: {period}.");
            var query = _context.Orders.AsQueryable();

            Dictionary<DateTime, decimal> averageOrderValue;

            if (period == "daily")
            {
                averageOrderValue = query
                    .GroupBy(o => o.OrderDate.Date)
                    .ToDictionary(
                        g => g.Key,
                        g => g.Average(o => o.TotalAmount)
                    );
            }
            else if (period == "weekly")
            {
                averageOrderValue = query
                    .GroupBy(o => new { Week = ISOWeek.GetWeekOfYear(o.OrderDate), Year = o.OrderDate.Year })
                    .ToDictionary(
                        g => new DateTime(g.Key.Year, 1, 1).AddDays(g.Key.Week * 7),
                        g => g.Average(o => o.TotalAmount)
                    );
            }
            else if (period == "monthly")
            {
                averageOrderValue = query
                    .GroupBy(o => new { o.OrderDate.Year, o.OrderDate.Month })
                    .ToDictionary(
                        g => new DateTime(g.Key.Year, g.Key.Month, 1),
                        g => g.Average(o => o.TotalAmount)
                    );
            }
            else
            {
                log.Error("Invalid period specified.");
                return new Dictionary<DateTime, decimal>();
            }

            log.Info("Retrieved average order value.");
            return averageOrderValue;
        }

        public Dictionary<string, int> GetVegNonVegItemCount(int restaurantId)
        {
            log.Info($"Retrieving Veg and Non-Veg item counts for Restaurant ID: {restaurantId}.");

            var menuItems = _context.MenuItems
                .Where(mi => mi.Menu.RestaurantID == restaurantId)
                .ToList();

            int vegCount = menuItems.Count(mi => mi.Category.ToLower() == "veg");
            int nonVegCount = menuItems.Count(mi => mi.Category.ToLower() == "non-veg");

            var result = new Dictionary<string, int>
        {
        { "Veg", vegCount },
        { "Non-Veg", nonVegCount }
         };

            log.Info($"Veg count: {vegCount}, Non-Veg count: {nonVegCount} for Restaurant ID: {restaurantId}.");
            return result;
        }


    }
}
